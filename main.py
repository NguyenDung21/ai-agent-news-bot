import os
import time
import schedule
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from duckduckgo_search import DDGS
import google.generativeai as genai
from dotenv import load_dotenv
from newspaper import Article  # Th√™m th∆∞ vi·ªán ƒë·ªÉ tr√≠ch xu·∫•t b√†i b√°o

# ==== 1. LOAD BI·∫æN M√îI TR∆Ø·ªúNG ====
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
EMAIL_SENDER = os.getenv("EMAIL_SENDER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_RECEIVER = os.getenv("EMAIL_RECEIVER")

# ==== 2. VALIDATE ====
if not GOOGLE_API_KEY:
    raise ValueError("‚ùå Thi·∫øu GOOGLE_API_KEY trong bi·∫øn m√¥i tr∆∞·ªùng.")
if not EMAIL_SENDER or not EMAIL_PASSWORD or not EMAIL_RECEIVER:
    raise ValueError("‚ùå Thi·∫øu th√¥ng tin email trong bi·∫øn m√¥i tr∆∞·ªùng.")

# ==== 3. C·∫§U H√åNH GEMINI ====
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest")

# ==== 4. T√åM KI·∫æM WEB V√Ä L·∫§Y N·ªòI DUNG B√ÄI B√ÅO ====
def web_search(query, max_results=5):
    results = []
    with DDGS() as ddgs:
        for r in ddgs.text(query, max_results=max_results):
            results.append({
                "title": r["title"],
                "href": r["href"],
                "body": r.get("body", "Kh√¥ng c√≥ m√¥ t·∫£")
            })
    return results

# ==== 5. L·∫§Y V√Ä PH√ÇN T√çCH B√ÄI B√ÅO ====
def get_article_content(url):
    article = Article(url)
    article.download()
    article.parse()
    return article.text

# ==== 6. T·∫†O PROMPT V√Ä T√ìM T·∫ÆT ====
def generate_summary(article_content):
    prompt = (
        f"T√¥i l√† m·ªôt nh√† b√°o AI chuy√™n nghi·ªáp. D∆∞·ªõi ƒë√¢y l√† n·ªôi dung b√†i b√°o. H√£y ph√¢n t√≠ch k·ªπ n·ªôi dung b√†i vi·∫øt v√† ƒë∆∞a ra t√≥m t·∫Øt chi ti·∫øt, "
        f"c√°c y·∫øu t·ªë quan tr·ªçng, t√°c ƒë·ªông c·ªßa s·ª± ki·ªán v√† k·∫øt lu·∫≠n:\n\n{article_content}"
    )
    response = model.generate_content(prompt)
    return response.text.strip()

# ==== 7. G·ª¨I EMAIL ====
def send_email(subject, body):
    msg = MIMEMultipart()
    msg['From'] = EMAIL_SENDER
    msg['To'] = EMAIL_RECEIVER
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.send_message(msg)

    print("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")

# ==== 8. AGENT CH·∫†Y H√ÄNG NG√ÄY ====
def daily_summary():
    query = "tin t·ª©c Vi·ªát Nam v√† th·∫ø gi·ªõi m·ªõi nh·∫•t h√¥m nay"
    print("üîç ƒêang thu th·∫≠p tin t·ª©c...")
    articles = web_search(query, max_results=3)  # L·∫•y 5 b√†i b√°o
    print("üß† ƒêang ph√¢n t√≠ch v√† t√≥m t·∫Øt...")

    all_summaries = []
    for article in articles:
        article_content = get_article_content(article["href"])
        summary = generate_summary(article_content)
        all_summaries.append(f"üìë Ti√™u ƒë·ªÅ: {article['title']}\n{summary}\n\n")

    full_email = (
        f"üìÖ B·∫¢N TIN S√ÅNG T·ª∞ ƒê·ªòNG - {time.strftime('%d/%m/%Y')}\n\n"
        + "\n".join(all_summaries)  # K·∫øt h·ª£p t·∫•t c·∫£ c√°c b·∫£n tin
        + "ü§ñ B·∫£n tin ƒë∆∞·ª£c t·∫°o b·ªüi AI Agent t·ª± ƒë·ªông m·ªói s√°ng."
    )
    send_email("üì∞ B·∫£n tin s√°ng AI Agent", full_email)

# ==== 9. L·ªäCH CH·∫†Y ====
schedule.every().day.at("07:00").do(daily_summary)

print("ü§ñ AI Agent ƒë√£ s·∫µn s√†ng v√† s·∫Ω ch·∫°y m·ªói s√°ng l√∫c 7h!")

while True:
    print("‚è≥ ƒêang ch·ªù ƒë·∫øn gi·ªù ch·∫°y...")
    schedule.run_pending()
    time.sleep(60)
